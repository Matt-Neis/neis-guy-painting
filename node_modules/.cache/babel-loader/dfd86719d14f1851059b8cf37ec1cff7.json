{"ast":null,"code":"var fs = require('fs');\n\nvar readline = require('readline');\n\nvar _require = require('googleapis'),\n    google = _require.google;\n\nvar btoa = require('btoa');\n\nvar googleAuth = require('google-auth-library'); // If modifying these scopes, delete token.json.\n\n\nvar SCOPES = ['https://www.googleapis.com/auth/gmail.send', 'https://www.googleapis.com/auth/gmail.readonly']; // const SCOPES = ['https://mail.google.com/'];\n// The file token.json stores the user's access and refresh tokens, and is\n// created automatically when the authorization flow completes for the first\n// time.\n\nvar TOKEN_PATH = 'token.json'; // main\n// Load client secrets from a local file.\n\nfs.readFile('credentials.json', function (err, content) {\n  if (err) return console.log('Error loading client secret file:', err); // Authorize a client with credentials, then call the Gmail API.\n  // authorize(JSON.parse(content), getRecentEmail);\n  //authorize(JSON.parse(content), listLabels);\n\n  authorize(JSON.parse(content), sendMessage);\n});\n/**\r\n * Create an OAuth2 client with the given credentials, and then execute the\r\n * given callback function.\r\n * @param {Object} credentials The authorization client credentials.\r\n * @param {function} callback The callback to call with the authorized client.\r\n */\n\nfunction authorize(credentials, callback) {\n  // credentials should eventually go into db\n  var _credentials$installe = credentials.installed,\n      client_secret = _credentials$installe.client_secret,\n      client_id = _credentials$installe.client_id,\n      redirect_uris = _credentials$installe.redirect_uris;\n  var oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]); // Check if we have previously stored a token.\n\n  fs.readFile(TOKEN_PATH, function (err, token) {\n    if (err) return getNewToken(oAuth2Client, callback);\n    oAuth2Client.setCredentials(JSON.parse(token)); // console.log(callback);\n\n    callback(oAuth2Client);\n  });\n}\n/**\r\n * Get and store new token after prompting for user authorization, and then\r\n * execute the given callback with the authorized OAuth2 client.\r\n * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\r\n * @param {getEventsCallback} callback The callback for the authorized client.\r\n */\n\n\nfunction getNewToken(oAuth2Client, callback) {\n  var authUrl = oAuth2Client.generateAuthUrl({\n    access_type: 'offline',\n    scope: SCOPES\n  });\n  console.log('Authorize this app by visiting this url:', authUrl);\n  var rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout\n  });\n  rl.question('Enter the code from that page here: ', function (code) {\n    rl.close();\n    oAuth2Client.getToken(code, function (err, token) {\n      if (err) return console.error('Error retrieving access token', err);\n      oAuth2Client.setCredentials(token); // Store the token to disk for later program executions\n\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), function (err) {\n        if (err) return console.error(err);\n        console.log('Token stored to', TOKEN_PATH);\n      });\n      callback(oAuth2Client);\n    });\n  });\n}\n/**\r\n * Lists the labels in the user's account.\r\n *\r\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\r\n */\n\n\nfunction listLabels(auth) {\n  var gmail = google.gmail({\n    version: 'v1',\n    auth: auth\n  });\n  gmail.users.labels.list({\n    userId: 'me'\n  }, function (err, res) {\n    if (err) return console.log('The API returned an error: ' + err);\n    var labels = res.data.labels;\n\n    if (labels.length) {\n      console.log('Labels:');\n      labels.forEach(function (label) {\n        console.log(\"- \".concat(label.name));\n      });\n    } else {\n      console.log('No labels found.');\n    }\n  });\n}\n/**\r\n * Get the recent email from your Gmail account\r\n *\r\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\r\n */\n\n\nfunction getRecentEmail(auth) {\n  // Only get the recent email - 'maxResults' parameter\n  var gmail = google.gmail({\n    version: 'v1',\n    auth: auth\n  });\n  gmail.users.messages.list({\n    auth: auth,\n    userId: 'me',\n    maxResults: 1\n  }, function (err, response) {\n    if (err) {\n      console.log('The API returned an error: ' + err);\n      return;\n    } // Get the message id which we will need to retreive tha actual message next.\n\n\n    var message_id = response['data']['messages'][0]['id']; // Retreive the actual message using the message id\n\n    gmail.users.messages.get({\n      auth: auth,\n      userId: 'me',\n      'id': message_id\n    }, function (err, response) {\n      if (err) {\n        console.log('The API returned an error: ' + err);\n        return;\n      } // have to decode the message from base64\n\n\n      message_raw = response['data']['payload']['parts'][0].body.data;\n      data = message_raw;\n      buff = new Buffer(data, 'base64');\n      text = buff.toString();\n      console.log(text);\n      console.log(message_id);\n    });\n  });\n}\n/**\r\n * Send Message.\r\n *\r\n * @param  {String} userId User's email address. The special value 'me'\r\n * can be used to indicate the authenticated user.\r\n * @param  {String} email RFC 5322 formatted String.\r\n * @param  {Function} callback Function to call when the request is complete.\r\n */\n\n\nfunction sendMessage(auth, callback) {\n  // Using the js-base64 library for encoding:\n  // https://www.npmjs.com/package/js-base64\n  //var base64EncodedEmail = Base64.encodeURI(email);\n  var gmail = google.gmail({\n    version: 'v1',\n    auth: auth\n  }); //var base64EncodedEmail = Buffer.from(message).toString('base64');\n\n  var base64EncodedEmail = btoa(\"To: neisguypainting@gmail.com\\n\" + \"Subject: Test 2\\n\" + \"Date:\\r\\n\" + // Removing timestamp\n  \"Message-Id:\\r\\n\" + // Removing message id\n  \"From:\\r\\n\" + // Removing from\n  \"Name - Test 2\\nSecond Line\\n3rd Line\\n\\nThis is a test to see if the email was sent correctly.\"); // Adding our actual message\n\n  var mail = base64EncodedEmail; // console.log(base64EncodedEmail); // debug\n\n  var request = gmail.users.messages.send({\n    'auth': auth,\n    'userId': 'me',\n    'resource': {\n      'raw': 'VG86IG5laXNtajEyQGdtYWlsLmNvbSwgbmVpc2d1eXBhaW50aW5nQGdtYWlsLmNvbQpTdWJqZWN0OiBSZXF1ZXN0IGZvciBRdW90ZSBSZWNlaXZlZApEYXRlOgpNZXNzYWdlLUlkOgpGcm9tOgpOYW1lIC0gTWF0dCBOZWlzCkVtYWlsIC0gbmVpc21qMTJAZ21haWwuY29tClBob25lIC0gNDE0NTUwNDMzNwpBZGRyZXNzIC0gMTU4NiBRdWFycnkgUGFyayBEci4KQ2l0eSAtIERFIFBFUkUKCmFzZGZhc2Rm'\n    }\n  }, function (err, gmailMessage) {\n    if (callback) {\n      return callback(err, gmailMessage);\n    }\n\n    if (err) {\n      console.log('Error while trying to send gmail message => ' + err);\n    }\n  }); // request.execute(callback);\n  // request.callback;\n}","map":{"version":3,"sources":["D:\\Documents\\Web Programming\\React\\neis-guy-painting\\src\\Server\\Node\\gmail.js"],"names":["fs","require","readline","google","btoa","googleAuth","SCOPES","TOKEN_PATH","readFile","err","content","console","log","authorize","JSON","parse","sendMessage","credentials","callback","installed","client_secret","client_id","redirect_uris","oAuth2Client","auth","OAuth2","token","getNewToken","setCredentials","authUrl","generateAuthUrl","access_type","scope","rl","createInterface","input","process","stdin","output","stdout","question","code","close","getToken","error","writeFile","stringify","listLabels","gmail","version","users","labels","list","userId","res","data","length","forEach","label","name","getRecentEmail","messages","maxResults","response","message_id","get","message_raw","body","buff","Buffer","text","toString","base64EncodedEmail","mail","request","send","gmailMessage"],"mappings":"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","sourcesContent":["const fs = require('fs');\r\nconst readline = require('readline');\r\nconst {google} = require('googleapis');\r\nconst btoa = require('btoa');\r\nconst googleAuth = require('google-auth-library');\r\n\r\n// If modifying these scopes, delete token.json.\r\nconst SCOPES = ['https://www.googleapis.com/auth/gmail.send', \r\n                'https://www.googleapis.com/auth/gmail.readonly'];\r\n// const SCOPES = ['https://mail.google.com/'];\r\n// The file token.json stores the user's access and refresh tokens, and is\r\n// created automatically when the authorization flow completes for the first\r\n// time.\r\nconst TOKEN_PATH = 'token.json';\r\n\r\n// main\r\n// Load client secrets from a local file.\r\nfs.readFile('credentials.json', (err, content) => {\r\n  if (err) return console.log('Error loading client secret file:', err);\r\n\r\n  // Authorize a client with credentials, then call the Gmail API.\r\n  // authorize(JSON.parse(content), getRecentEmail);\r\n  //authorize(JSON.parse(content), listLabels);\r\n  authorize(JSON.parse(content), sendMessage);\r\n});\r\n\r\n/**\r\n * Create an OAuth2 client with the given credentials, and then execute the\r\n * given callback function.\r\n * @param {Object} credentials The authorization client credentials.\r\n * @param {function} callback The callback to call with the authorized client.\r\n */\r\nfunction authorize(credentials, callback) { // credentials should eventually go into db\r\n  const {client_secret, client_id, redirect_uris} = credentials.installed;\r\n  const oAuth2Client = new google.auth.OAuth2(\r\n      client_id, client_secret, redirect_uris[0]);\r\n\r\n  // Check if we have previously stored a token.\r\n  fs.readFile(TOKEN_PATH, (err, token) => {\r\n    if (err) return getNewToken(oAuth2Client, callback);\r\n    oAuth2Client.setCredentials(JSON.parse(token));\r\n    // console.log(callback);\r\n    callback(oAuth2Client);\r\n  });\r\n}\r\n\r\n/**\r\n * Get and store new token after prompting for user authorization, and then\r\n * execute the given callback with the authorized OAuth2 client.\r\n * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.\r\n * @param {getEventsCallback} callback The callback for the authorized client.\r\n */\r\nfunction getNewToken(oAuth2Client, callback) {\r\n  const authUrl = oAuth2Client.generateAuthUrl({\r\n    access_type: 'offline',\r\n    scope: SCOPES,\r\n  });\r\n  console.log('Authorize this app by visiting this url:', authUrl);\r\n  const rl = readline.createInterface({\r\n    input: process.stdin,\r\n    output: process.stdout,\r\n  });\r\n  rl.question('Enter the code from that page here: ', (code) => {\r\n    rl.close();\r\n    oAuth2Client.getToken(code, (err, token) => {\r\n      if (err) return console.error('Error retrieving access token', err);\r\n      oAuth2Client.setCredentials(token);\r\n      // Store the token to disk for later program executions\r\n      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {\r\n        if (err) return console.error(err);\r\n        console.log('Token stored to', TOKEN_PATH);\r\n      });\r\n      callback(oAuth2Client);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Lists the labels in the user's account.\r\n *\r\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\r\n */\r\nfunction listLabels(auth) {\r\n  const gmail = google.gmail({version: 'v1', auth});\r\n  gmail.users.labels.list({\r\n    userId: 'me',\r\n  }, (err, res) => {\r\n    if (err) return console.log('The API returned an error: ' + err);\r\n    const labels = res.data.labels;\r\n    if (labels.length) {\r\n      console.log('Labels:');\r\n      labels.forEach((label) => {\r\n        console.log(`- ${label.name}`);\r\n      });\r\n    } else {\r\n      console.log('No labels found.');\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Get the recent email from your Gmail account\r\n *\r\n * @param {google.auth.OAuth2} auth An authorized OAuth2 client.\r\n */\r\nfunction getRecentEmail(auth) {\r\n  // Only get the recent email - 'maxResults' parameter\r\n  const gmail = google.gmail({version: 'v1', auth});\r\n  gmail.users.messages.list({auth: auth, userId: 'me', maxResults: 1,}, function(err, response) {\r\n      if (err) {\r\n          console.log('The API returned an error: ' + err);\r\n          return;\r\n      }\r\n\r\n    // Get the message id which we will need to retreive tha actual message next.\r\n    var message_id = response['data']['messages'][0]['id'];\r\n\r\n    // Retreive the actual message using the message id\r\n    gmail.users.messages.get({auth: auth, userId: 'me', 'id': message_id}, function(err, response) {\r\n        if (err) {\r\n            console.log('The API returned an error: ' + err);\r\n            return;\r\n        }\r\n\r\n        // have to decode the message from base64\r\n        message_raw = response['data']['payload']['parts'][0].body.data;\r\n        data = message_raw;  \r\n        buff = new Buffer(data, 'base64');  \r\n        text = buff.toString();\r\n        console.log(text);\r\n        console.log(message_id);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Send Message.\r\n *\r\n * @param  {String} userId User's email address. The special value 'me'\r\n * can be used to indicate the authenticated user.\r\n * @param  {String} email RFC 5322 formatted String.\r\n * @param  {Function} callback Function to call when the request is complete.\r\n */\r\nfunction sendMessage(auth, callback) {\r\n  // Using the js-base64 library for encoding:\r\n  // https://www.npmjs.com/package/js-base64\r\n  //var base64EncodedEmail = Base64.encodeURI(email);\r\n  const gmail = google.gmail({version: 'v1', auth});\r\n  //var base64EncodedEmail = Buffer.from(message).toString('base64');\r\n\r\n  var base64EncodedEmail = btoa(`To: neisguypainting@gmail.com\\n` +\r\n             `Subject: Test 2\\n` +\r\n             `Date:\\r\\n` + // Removing timestamp\r\n             `Message-Id:\\r\\n` + // Removing message id\r\n             `From:\\r\\n` + // Removing from\r\n             `Name - Test 2\\nSecond Line\\n3rd Line\\n\\nThis is a test to see if the email was sent correctly.`) // Adding our actual message\r\n          \r\n  var mail = base64EncodedEmail;\r\n\r\n  // console.log(base64EncodedEmail); // debug\r\n\r\n  var request = gmail.users.messages.send({\r\n    'auth': auth,\r\n    'userId': 'me',\r\n    'resource': {\r\n      'raw': 'VG86IG5laXNtajEyQGdtYWlsLmNvbSwgbmVpc2d1eXBhaW50aW5nQGdtYWlsLmNvbQpTdWJqZWN0OiBSZXF1ZXN0IGZvciBRdW90ZSBSZWNlaXZlZApEYXRlOgpNZXNzYWdlLUlkOgpGcm9tOgpOYW1lIC0gTWF0dCBOZWlzCkVtYWlsIC0gbmVpc21qMTJAZ21haWwuY29tClBob25lIC0gNDE0NTUwNDMzNwpBZGRyZXNzIC0gMTU4NiBRdWFycnkgUGFyayBEci4KQ2l0eSAtIERFIFBFUkUKCmFzZGZhc2Rm'\r\n      }\r\n    }, function(err, gmailMessage) {\r\n      if (callback) {\r\n        return callback(err, gmailMessage);\r\n      }\r\n\r\n      if (err) {\r\n        console.log('Error while trying to send gmail message => ' + err);\r\n      }\r\n  });\r\n\r\n  // request.execute(callback);\r\n  // request.callback;\r\n}"]},"metadata":{},"sourceType":"module"}