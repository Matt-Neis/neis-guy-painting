{"ast":null,"code":"/**\n * Created by alykoshin on 8/12/14.\n */\n'use strict';\n\nvar _ = require('lodash');\n\nvar path = require('path');\n\nvar nodemailer = require('nodemailer');\n/**\n * sendOptions - options for nodemailer\n *\n * @typedef {Object} sendOptions\n * @property {string} options.user\n * @property {string} options.pass\n * @property {(string || string[])} options.files\n * @property {string} options.from\n * @property {string} options.to\n * @property {string} options.replyTo\n * @property {string} options.text\n * @property {string} options.html\n * @property {string} options.attachments - array of `nodemailer`s compatible attachments definitions\n */\n\n/**\n * @callback sendCallback\n * @param {Object} error\n * @param {string} result\n */\n\n/**\n * @constructor\n * @param {sendOptions} options  - options for underlying nodemailer\n * @type {Function}\n */\n\n\nvar GMailSend = function GMailSend(options) {\n  var self = this;\n  /** @member {string} */\n\n  self.options = options;\n  /** helper to build 'Some Name <some.name@domain.com>' **/\n\n  function prepareAddress(name, address) {\n    return name + ' ' + '<' + address + '>';\n  }\n  /**\n   * Send email\n   * You may use almost any option available in nodemailer,\n   * but if you need fine tuning I'd recommend to consider using nodemailer directly.\n   *\n   * @param {sendOptions} options  - options for underlying nodemailer\n   * @param {sendCallback} callback\n   */\n\n\n  self.send = function (options, callback) {\n    callback = typeof callback === 'function' ? callback : function () {};\n    options = _.extend({}, self.options, options);\n\n    if (!options.user || !options.pass) {\n      throw 'options.user options.pass are mandatory.';\n    }\n\n    options.from = options.from || options.user; //options.replyTo = options.replyTo || options.user;\n    // Configure email transport\n\n    var TRANSPORT = {\n      service: 'Gmail',\n      auth: {\n        user: options.user,\n        pass: options.pass\n      }\n    };\n    var smtpTransport = nodemailer.createTransport(TRANSPORT); // Preparing nodemailer options (and attachments)\n    // File attachments\n\n    options.files = options.files || [];\n    if (!Array.isArray(options.files)) options.files = [options.files]; //if (typeof options.files === 'string') { options.files = [options.files]; }\n\n    options.attachments = options.attachments || [];\n\n    for (var i = 0; i < options.files.length; i++) {\n      var file = options.files[i]; // if string is passed, convert it to `nodemailer` attachment object\n\n      if (typeof file === 'string') {\n        file = {\n          path: file //filename: path.basename( file ),\n          //cid:      path.basename( file ),\n\n        };\n      }\n\n      if (!file.path) return callback(new Error('file/filepath to attach must be set'), '');\n      if (file.filename === 'undefined') file.filename = path.basename(file.path);\n      if (file.cid === 'undefined') file.cid = file.filename; // we do not validate if options.files[i] is really object and has valid properties\n      // add to options.attachments used by `nodemailer`\n\n      options.attachments.push(file);\n    }\n\n    delete options.files; // remove files property as incompatible with options of underlying `nodemailer`\n    // from\n\n    options.from = prepareAddress(options.from, options.from); // adjust to nodemailer format\n    // to\n\n    if (typeof options.to === 'string') {\n      options.to = prepareAddress(options.to, options.to); // adjust to nodemailer format\n    } else if (Array.isArray(options.to)) {\n      var to = options.to.map(function (addr) {\n        return prepareAddress(addr, addr);\n      });\n      options.to = to.join(',');\n    } // Sending email\n    //console.log('gmail-send: send(): mailOptions: ', options);\n\n\n    smtpTransport.sendMail(options, function (error, info) {\n      if (error) {\n        //console.log('gmail-send: send(): Error sending message:', error);\n        callback(error);\n      } else {\n        //console.log(\"gmail-send: send(): Message sent: \" + info.response);\n        callback(null, info.response);\n      }\n    });\n  };\n\n  return self;\n}; //\n\n/**\n * Exporting function to send email\n *\n * @param {sendOptions} options  - options for new GMailSend()\n * @returns {function}\n */\n\n\nmodule.exports = function (options) {\n  return new GMailSend(options).send;\n};","map":null,"metadata":{},"sourceType":"script"}